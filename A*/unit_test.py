from main import astar


def test_astar_small():
    example_graph_small = {
        # vertex: (heuristic_distance, [(nxt_vertex,edge_cost), ...])
        'A': (17,   [('B', 5), ('C', 3)]),
        'B': (13,   [('A', 5), ('C', 1), ('D', 4)]),
        'C': (14,   [('A', 3), ('B', 1), ('D', 6), ('E', 10)]),
        'D': (9,    [('B', 4), ('C', 6), ('E', 8), ('G', 6)]),
        'E': (4,    [('D', 8), ('C', 10), ('F', 3)]),
        'F': (1,    [('G', 3), ('E', 3), ('Goal', 1)]),
        'G': (3,    [('D', 6), ('F', 3), ('Goal', 3)]),
        'Goal': (0, [('G', 3), ('F', 1)])
    }
    assert astar(example_graph_small, 'A', 'Goal') == (
        'A', 'B', 'D', 'G', 'Goal')


def test_astar_large():
    example_graph_large = {
        # vertex: (heuristic_distance, [(nxt_vertex,edge_cost), ...])
        'A': (16, [('B', 5), ('C', 5)]),
        'B': (17, [('A', 5), ('C', 4), ('D', 3)]),
        'C': (13, [('A', 5), ('B', 4), ('D', 7), ('E', 7), ('H', 8)]),
        'D': (16, [('B', 3), ('C', 7), ('H', 11), ('M', 14), ('L', 13),
                   ('K', 16)]),
        'E': (16, [('C', 7), ('F', 4), ('H', 5)]),
        'F': (20, [('E', 4), ('G', 9)]),
        'G': (17, [('F', 9), ('N', 12)]),
        'H': (11, [('C', 8), ('D', 11), ('E', 5), ('I', 3)]),
        'I': (10, [('H', 3), ('J', 4)]),
        'J': (8,  [('I', 4), ('N', 3), ('P', 8)]),
        'K': (4,  [('D', 16), ('L', 5), ('N', 7), ('P', 4)]),
        'L': (7,  [('D', 13), ('K', 5), ('M', 9), ('O', 4)]),
        'M': (10, [('D', 14), ('L', 9), ('O', 5)]),
        'N': (7,  [('G', 12), ('J', 3), ('K', 7), ('P', 7)]),
        'O': (5,  [('L', 4),  ('M', 5)]),
        'P': (0,  [('J', 8), ('K', 4), ('N', 7)])
    }
    assert astar(example_graph_large, 'A', 'P') == (
        'A', 'C', 'H', 'I', 'J', 'P')
